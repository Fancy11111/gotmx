// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: task.sql

package persistence

import (
	"context"
	"database/sql"
)

const findTasksByName = `-- name: FindTasksByName :many
select id, name, project_id from tasks
where name like ('%' || ?1 || '%')
`

func (q *Queries) FindTasksByName(ctx context.Context, name sql.NullString) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findTasksByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Name, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
select id, name, project_id from tasks
where id = ?1 limit 1
`

func (q *Queries) GetTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(&i.ID, &i.Name, &i.ProjectID)
	return i, err
}

const getTasks = `-- name: GetTasks :many
select id, name, project_id from tasks 
order by name
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Name, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTask = `-- name: InsertTask :one
insert into tasks(name, project_id) values(?,?) returning id, name, project_id
`

type InsertTaskParams struct {
	Name      string
	ProjectID sql.NullInt64
}

func (q *Queries) InsertTask(ctx context.Context, arg InsertTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, insertTask, arg.Name, arg.ProjectID)
	var i Task
	err := row.Scan(&i.ID, &i.Name, &i.ProjectID)
	return i, err
}
