// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: project.sql

package persistence

import (
	"context"
	"database/sql"
)

const findProjectsByName = `-- name: FindProjectsByName :many
select id, name from projects
where name like ('%' || ?1 || '%')
`

func (q *Queries) FindProjectsByName(ctx context.Context, name sql.NullString) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, findProjectsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectById = `-- name: GetProjectById :one
select id, name from projects
where id = ?1 limit 1
`

func (q *Queries) GetProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProjects = `-- name: GetProjects :many
select id, name from projects 
order by name
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProject = `-- name: InsertProject :one
insert into projects(name) values (?1) returning id, name
`

func (q *Queries) InsertProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, insertProject, name)
	var i Project
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
